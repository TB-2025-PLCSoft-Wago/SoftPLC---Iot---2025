import React, { useEffect, useMemo, useState } from "react";
import {
    getConnectedEdges,
    Handle,
    NodeProps,
    Position,
    useStore,
    useUpdateNodeInternals
} from "reactflow";

import { LogicalNodeData } from "./types.ts";
import BoolToStringHandles from "./handles/BoolToStringHandles.tsx";
import FixedHandles from "./handles/FixedHandles.tsx";
import StretchableHandles from "./handles/StretchableHandles.tsx";
import { getParameterElementUsingNumber } from "./utils/getParameterCount.ts";

const LogicalNode: React.FC<NodeProps<LogicalNodeData>> = (props) => {
    const {
        data = {
            inputHandle: [],
            outputHandle: [],
            stretchable: false,
            label: "BUG",
            id: "BUG",
        },
    } = props;

    data.selectedServiceData = "";
    data.selectedSubServiceData = "";
    data.valueData = "";
    data.selectedFriendlyNameData = "";

    const edges = useStore((state) => state.edges);
    const updateNodeInternals = useUpdateNodeInternals();

    const numberOfConnectedTargetHandles = useMemo(() => {
        if (data.stretchable) {
            const connectedEdges = getConnectedEdges([props], edges);
            const connectedTargetHandles = connectedEdges
                .filter((edge) => edge.target === props.id)
                .map((edge) => edge.targetHandle);
            return connectedTargetHandles.length;
        }
        return -1;
    }, [data.stretchable, data.inputHandle, props.id, edges]);

    useEffect(() => {
        updateNodeInternals(props.id);
    }, [numberOfConnectedTargetHandles]);

    const [inputValues, setInputValues] = useState<string[]>(data.parameterValueData ?? []);

    useEffect(() => {
        const initialValues = Array.from(
            { length: Math.max(numberOfConnectedTargetHandles + 1, getParameterElementUsingNumber(data.parameterValueData ?? []) + 1) },
            (_, i) => inputValues[i] || ""
        );
        setInputValues(initialValues);
        data.parameterValueData = initialValues;
    }, [numberOfConnectedTargetHandles]);

    const handleInputChange = (index: number) => (event: React.ChangeEvent<HTMLInputElement>) => {
        const newValues = [...inputValues];
        newValues[index] = event.target.value;
        setInputValues(newValues);
        data.parameterValueData = newValues;
    };

    let content;
    if (data.label === "bool to string") {
        content = (
            <BoolToStringHandles
                data={data}
                numberOfConnectedTargetHandles={numberOfConnectedTargetHandles}
                inputValues={inputValues}
                handleInputChange={handleInputChange}
            />
        );
    } else if (!data.stretchable) {
        content = <FixedHandles data={data} />;
    } else {
        content = (
            <StretchableHandles
                data={data}
                numberOfConnectedTargetHandles={numberOfConnectedTargetHandles}
            />
        );
    }

    const height = (Math.max(numberOfConnectedTargetHandles, getParameterElementUsingNumber(data.parameterValueData ?? [])) + 3) * 40;

    return (
        <div
            className="react-flow__node-default logicalNode"
            style={{
                height: `${height}px`,
                width: data.label === "bool to string" ? "225px" : "80px",
                position: "relative",
            }}
        >
            {data.label && <div>{data.label}</div>}
            {content}
        </div>
    );
};

export default LogicalNode;

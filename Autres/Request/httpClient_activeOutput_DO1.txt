resp = {*http.Response | 0xc000490120} 
 Status = {string} "204 No Content"
 StatusCode = {int} 204
 Proto = {string} "HTTP/1.1"
 ProtoMajor = {int} 1
 ProtoMinor = {int} 1
 Header = {http.Header} 
  0 = Vary -> len:1, cap:1
   key = {string} "Vary"
   value = {[]string} len:1, cap:1
    0 = {string} "Origin"
  1 = Date -> len:1, cap:1
   key = {string} "Date"
   value = {[]string} len:1, cap:1
    0 = {string} "Fri, 11 Apr 2025 08:52:24 GMT"
 Body = {io.ReadCloser | http.noBody} 
 ContentLength = {int64} 0
 TransferEncoding = {[]string} nil
 Close = {bool} false
 Uncompressed = {bool} false
 Trailer = {http.Header} nil
 Request = {*http.Request | 0xc000240000} PUT http://192.168.37.134:8888/api/v1/hal/do/0
  Method = {string} "PUT"
  URL = {*url.URL | 0xc000214120} 
   Scheme = {string} "http"
   Opaque = {string} ""
   User = {*url.Userinfo | 0x0} nil
   Host = {string} "192.168.37.134:8888"
   Path = {string} "/api/v1/hal/do/0"
   RawPath = {string} ""
   OmitHost = {bool} false
   ForceQuery = {bool} false
   RawQuery = {string} ""
   Fragment = {string} ""
   RawFragment = {string} ""
  Proto = {string} "HTTP/1.1"
  ProtoMajor = {int} 1
  ProtoMinor = {int} 1
  Header = {http.Header} 
   0 = Content-Type -> len:1, cap:1
    key = {string} "Content-Type"
    value = {[]string} len:1, cap:1
     0 = {string} "application/json"
  Body = {io.ReadCloser | io.nopCloserWriterTo} 
   Reader = {io.Reader | *strings.Reader} 
    s = {string} "true"
    i = {int64} 4
    prevRune = {int} -1
  GetBody = {func() (io.ReadCloser, error)} net/http.NewRequestWithContext.func3
   snapshot = {strings.Reader} 
    s = {string} "true"
    i = {int64} 0
    prevRune = {int} -1
  ContentLength = {int64} 4
  TransferEncoding = {[]string} nil
  Close = {bool} false
  Host = {string} "192.168.37.134:8888"
  Form = {url.Values} nil
  PostForm = {url.Values} nil
  MultipartForm = {*multipart.Form | 0x0} nil
  Trailer = {http.Header} nil
  RemoteAddr = {string} ""
  RequestURI = {string} ""
  TLS = {*tls.ConnectionState | 0x0} nil
  Cancel = {<-chan struct{}} nil
  Response = {*http.Response | 0x0} nil
  Pattern = {string} ""
  ctx = {context.Context | context.backgroundCtx} context.Background
   emptyCtx = {context.emptyCtx} 
  pat = {*http.pattern | 0x0} nil
  matches = {[]string} nil
  otherValues = {map[string]string} nil
 TLS = {*tls.ConnectionState | 0x0} nil